jpsVersion: 1.3
jpsType: install
application:
  id: shopozor-backend
  name: Shopozor Backend
  version: 0.0

  globals:
    SECRET_KEY: ${fn.uuid}
    PG_USER_PASSWORD: ${fn.password(10)}
    PG_DB_USERNAME: saleor
    PG_DB_NAME: saleor
    PG_PASSWORD: ${fn.password(10)}
    REDIS_PASSWORD: ${fn.password(10)}

  env:
    topology:
      nodes:
        - nodeGroup: bl
          nodeType: nginx-dockerized
          tag: 1.14.2
          displayName: Node balancing
          count: 1
          fixedCloudlets: 1
          cloudlets: 4
          env:
            DOCKER_EXPOSED_PORT: 22,80,443
        - image: softozor/shopozor-backend
          nodeGroup: cp
          tag: latest
          displayName: Application servers
          count: 1
          fixedCloudlets: 4
          cloudlets: 10
          env:
            SECRET_KEY: ${globals.SECRET_KEY}
            PYTHONPATH: /app/saleor
            DJANGO_SETTINGS_MODULE: shopozor.settings
            JWT_EXPIRATION_DELTA_IN_DAYS: 30
            JWT_REFRESH_EXPIRATION_DELTA_IN_DAYS: 360
            JWT_SECRET_KEY: ${fn.uuid}
            JWT_ALGORITHM: 'HS256'
            PORT: 8000
            PYTHONUNBUFFERED: 1
            PROCESSES: 1
            # TODO: needs to be set to False
            DEBUG: True
        - nodeGroup: sqldb
          nodeType: postgresql
          tag: 11.2
          displayName: PostgreSQL
          fixedCloudlets: 1
          cloudlets: 4
        - nodeGroup: nosqldb
          nodeType: redis
          tag: 4.0.11
          displayName: Redis cache
          fixedCloudlets: 1
          cloudlets: 4

  onInstall:
    - setPasswordOnRedisNode
    - setEnvVars
    - prepareDatabase
    - migrateDB
    - restorePermissions
    - restartDockerNodes
    - sendEmailWithPasswords
  actions:
    setPasswordOnRedisNode:
      - replaceInFile:
          path: /etc/redis.conf
          replacements:
            - pattern: requirepass\ .*
              replacement: requirepass ${globals.REDIS_PASSWORD}
          nodeType: redis
      - restartService:
          - nodeType: redis
    setEnvVars:
      - api:
          - method: jelastic.environment.control.AddContainerEnvVars
            params:
              nodeGroup: cp
              vars:
                DATABASE_URL: postgres://${globals.PG_DB_USERNAME}:${globals.PG_USER_PASSWORD}@${nodes.sqldb.intIP}:5432/${globals.PG_DB_NAME}
                CACHE_URL: redis://:${globals.REDIS_PASSWORD}@${nodes.nosqldb.intIP}:6379/0
                ALLOWED_HOSTS: ${env.envName}.hidora.com
    prepareDatabase:
      - createDatabase
    createDatabase:
      cmd[sqldb]:
        - jem passwd set -p ${globals.PG_PASSWORD}
        - export PGPASSWORD='${globals.PG_PASSWORD}'
        - psql -U webadmin -d postgres -c "CREATE ROLE ${globals.PG_DB_USERNAME} PASSWORD '${globals.PG_USER_PASSWORD}' SUPERUSER CREATEDB CREATEROLE INHERIT LOGIN;"
        - psql -U webadmin -d postgres -c "CREATE DATABASE ${globals.PG_DB_NAME} OWNER ${globals.PG_DB_USERNAME} ENCODING 'utf-8' TEMPLATE template0;"
      user: root
    restorePermissions:
      - cmd [sqldb]:
          - export PGPASSWORD='${globals.PG_PASSWORD}'
          - psql -U webadmin -d postgres -c "ALTER USER ${globals.PG_DB_USERNAME} WITH NOSUPERUSER;"
        user: root
    migrateDB:
      cmd [cp]:
        - cd /app
        - python3 ./manage.py migrate
    restartDockerNodes:
      restartContainers:
        - nodeGroup: cp
    sendEmailWithPasswords:
      return:
        result: success
        email: |
          # PostgreSQL
          **PostgreSQL URL**: postgres://${globals.PG_DB_USERNAME}:${globals.PG_USER_PASSWORD}@${nodes.sqldb.intIP}:5432/${globals.PG_DB_NAME}
          # PgAdmin
          **webadmin**: ${globals.PG_PASSWORD}
          # Redis
          **admin**: ${globals.REDIS_PASSWORD}
